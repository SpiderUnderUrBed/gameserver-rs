fn map_hyper_error(e: std::io::Error) -> std::io::Error {
    std::io::Error::new(std::io::ErrorKind::Other, e.to_string())
}

#[derive(Debug)]
struct Frame<T> {
    data: T,
}

impl<T> Frame<T> {
    fn new(data: T) -> Self {
        Frame { data }
    }
}

async fn build_docker_image() -> Result<(), Box<dyn Error>> {
    let docker = Docker::connect_with_local_defaults()?;
    let context_path = Path::new("/usr/src/app/src");

    let mut archive = Vec::new();
    {
        let mut tar = Builder::new(&mut archive);
        tar.append_dir_all(".", context_path)?;
        tar.finish()?;
    }

    let cursor = Cursor::new(archive);
    let stream = FramedRead::new(cursor, BytesCodec::new())
        .map_ok(|bytes| bytes.freeze())
        .map_err(|e| map_hyper_error(e));

    let boxed_stream: Pin<Box<dyn Stream<Item = Result<Bytes, std::io::Error>> + Send>> =
        Box::pin(stream);

    let frame_stream = boxed_stream.map(|item| {
        item.map(|bytes| Frame::new(bytes))
    });

    let mut full_bytes = Vec::new();
    let frame_stream = frame_stream.for_each(|item| {
        if let Ok(frame) = item {
            full_bytes.extend_from_slice(&frame.data);
        }
        std::future::ready(())
    }).await;

    let full_bytes = Bytes::from(full_bytes);
    let body = Either::Left(Full::from(full_bytes));

    let options = BuildImageOptions {
        dockerfile: "Dockerfile",
        t: "gameserver:latest",
        rm: true,
        ..Default::default()
    };

    let mut build_stream = docker.build_image(options, None, Some(body));

    while let Some(update) = build_stream.next().await {
        match update {
            Ok(update) => {
                if let Some(msg) = update.stream {
                    print!("{}", msg);
                }
                if let Some(err) = update.error {
                    return Err(err.into());
                }
            }
            Err(e) => return Err(e.into()),
        }
    }

    println!("\nImage built successfully!");
    Ok(())
}
