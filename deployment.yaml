apiVersion: v1
kind: ServiceAccount
metadata:
  name: pod-reader
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pod-reader
rules:
- apiGroups: [""]
  resources:
    - "pods"
    - "services"
    - "persistentvolumes"
    - "persistentvolumeclaims"
    - "nodes"                    
    - "pods/binding"               
    - "pods/eviction"             
  verbs:
    - "get"
    - "list"
    - "watch"
    - "update"
    - "delete"
    - "patch"
    - "create"
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pod-reader-binding
subjects:
- kind: ServiceAccount
  name: pod-reader
  namespace: default
roleRef:
  kind: ClusterRole
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
---
# # Storage Configuration
# apiVersion: storage.k8s.io/v1
# kind: StorageClass
# metadata:
#   name: local-path
# provisioner: kubernetes.io/no-provisioner
# volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: rust-app-pv
spec:
  capacity:
    storage: 5Gi
  volumeMode: Filesystem
  storageClassName: local-path
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /home/spiderunderurbed/projects/gameserver-rs
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rust-app-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: local-path
---
# Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rust-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rust-app
  template:
    metadata:
      labels:
        app: rust-app
    spec:
      # nodeSelector:
      #   kubernetes.io/hostname: raspberrypi 
      serviceAccountName: pod-reader
      # dnsPolicy: "ClusterFirstWithHostNet"
      # dnsConfig:
      #   nameservers:
        #  - 10.43.0.10
        #  - 1.1.1.1
        #  - 8.8.8.8
      containers:
        - name: rust-app
          image: localhost:5000/rust-k8s:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
            - containerPort: 8081
          env:  
            - name: SITE_URL 
              value: "/gameserver-rs"  
            - name: MYSQL_USER
              value: "gameserver"
            - name: MYSQL_PASSWORD
              value: "gameserverpass"
            - name: MYSQL_DATABASE
              value: "gameserver_db"
          volumeMounts:
            - name: source-code
              mountPath: /usr/src/app
            - name: docker-socket
              mountPath: /var/run/docker.sock
      volumes:
        - name: source-code
          persistentVolumeClaim:
            claimName: rust-app-pvc
        - name: docker-socket
          hostPath:
            path: /var/run/docker.sock
            type: Socket
---
# Service Exposure
apiVersion: v1
kind: Service
metadata:
  name: rust-service
spec:
  selector:
    app: rust-app
  ports:
  - name: http
    port: 80
    targetPort: 8080
  - name: ws
    port: 81
    targetPort: 8081
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: rust-route
  namespace: default
spec:
  entryPoints:
    - web
  routes:
    - match: (Host(`192.168.68.77`) && PathPrefix(`/gameserver-rs`)) || (Host(`192.168.1.22`) && PathPrefix(`/gameserver-rs`))
      kind: Rule
      middlewares:
        - name: general-middleware
      services:
        - name: rust-service
          port: 80
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: local-path
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      nodeSelector:
        kubernetes.io/hostname: extranuc
      containers:
        - name: mysql
          image: mysql:8
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "rootpassword"
            - name: MYSQL_DATABASE
              value: "gameserver_db"
            - name: MYSQL_USER
              value: "gameserver"
            - name: MYSQL_PASSWORD
              value: "gameserverpass"
          ports:
            - name: mysql
              containerPort: 3306
            - name: mysqlx
              containerPort: 33060
          volumeMounts:
            - name: mysql-pvc
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-pvc
          persistentVolumeClaim:
            claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
    - name: mysql
      port: 3306
      targetPort: 3306
    - name: mysqlx
      port: 33060
      targetPort: 33060
  type: ClusterIP
